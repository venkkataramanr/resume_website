{"version":3,"sources":["../../lib/dev.js"],"names":["path","require","chokidar","spawn","dependencyTree","ServerlessSDK","getAccessKeyForTenant","isEqual","findProcess","isAuthenticated","throwAuthError","execOptions","env","process","SLS_DEV_MODE","cwd","stdio","slsCommand","possibleServerlessConfigFileVariants","map","configFile","resolve","module","exports","ctx","sls","service","app","org","ServerlessError","classes","Error","deployToStage","provider","getStage","deployToRegion","processedInput","options","stage","region","info","autoStage","USER","Math","floor","random","endpoints","stdoutBuffer","toString","match","stringEndpoint","split","method","endpoint","e","stdout","write","JSON","stringify","meta","functions","resources","cli","log","processes","length","accessKey","sdk","platformStage","SERVERLESS_PLATFORM_STAGE","appState","isDeploying","isFunctionDeploying","connect","orgName","onEvent","event","data","clientType","isWebConnected","publishSync","updateAppState","publishAppState","isCliConnected","disconnect","isConnected","cleanup","exit","filenameToFunctionsMapping","functionToFilenames","on","getServerlessInfo","filenameToFunctions","trackedFiles","output","parse","Object","keys","forEach","functionName","handler","dir","name","handlerEntry","join","list","toList","filename","directory","filter","indexOf","watchedFilename","funcs","Set","push","overrides","deploy","isRedeploying","rewatchFiles","watcher","unwatch","add","watch","filepath","resolvedFilepath","normalize","sep","includes","functionNames","functionsNeedingDeploy","Promise","all"],"mappings":"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","sourcesContent":["'use strict';\n\nconst path = require('path');\nconst chokidar = require('chokidar');\nconst spawn = require('child-process-ext/spawn');\nconst dependencyTree = require('dependency-tree');\nconst { ServerlessSDK } = require('@serverless/platform-client');\nconst { getAccessKeyForTenant } = require('@serverless/platform-sdk');\nconst { isEqual } = require('lodash');\nconst findProcess = require('find-process');\n\nconst isAuthenticated = require('./isAuthenticated');\nconst throwAuthError = require('./throwAuthError');\n\n/**\n * Pass along env variables, and also SLS_DEV_MODE which will capture logs for Serverless Studio\n */\nconst execOptions = {\n  env: {\n    ...process.env,\n    SLS_DEV_MODE: true,\n  },\n  cwd: process.cwd(),\n  stdio: 'inherit',\n};\n\nconst slsCommand = 'serverless';\n\n/**\n * All serverless configuration file variants will be watched. Note that the absolute\n * path for this files is computed, since that is how chokidar is configured to watch\n * these files.\n */\nconst possibleServerlessConfigFileVariants = [\n  'serverless.yml',\n  'serverless.yaml',\n  'serverless.json',\n  'serverless.js',\n].map(configFile => path.resolve(configFile));\n\nmodule.exports = async function(ctx) {\n  const {\n    sls: {\n      service: { app, org },\n      classes: { Error: ServerlessError },\n    },\n  } = ctx;\n  const { sls } = ctx;\n\n  if (!isAuthenticated()) {\n    throwAuthError(sls);\n  }\n\n  if (!org) throw new ServerlessError('Missing `org` setting', 'DASHBOARD_MISSING_ORG');\n  if (!app) throw new ServerlessError('Missing `app` setting', 'DASHBOARD_MISSING_APP');\n\n  /**\n   * Stage used for development. By default, pick a generated stage,\n   * unless specified by the user.\n   */\n  let deployToStage = ctx.provider.getStage();\n  let deployToRegion = 'us-east-1';\n\n  const { stage, region, info, autoStage } = sls.processedInput.options;\n\n  if (stage) {\n    deployToStage = stage;\n  }\n\n  if (region) {\n    deployToRegion = region;\n  }\n\n  /**\n   * If specified, automatically pick a random stage, and remove it on exit\n   */\n  if (autoStage) {\n    deployToStage = `${process.env.USER || 'dev'}-${Math.floor(Math.random() * 100000)}`;\n  }\n\n  /**\n   * Informational flag, used by parent watch process\n   */\n  if (info) {\n    let endpoints = [];\n\n    /**\n     * Close your eyes.\n     *\n     * Call 'serverless info' here to get the endpoints and pull them out of the output, if there are any.\n     */\n    try {\n      const { stdoutBuffer } = await spawn(slsCommand, [\n        'info',\n        `--stage=${deployToStage}`,\n        `--region=${deployToRegion}`,\n      ]);\n\n      endpoints = stdoutBuffer\n        .toString()\n        .match(/(ANY|GET|POST|PUT|PATCH|HEAD|OPTIONS|DELETE) - (.*)/g)\n        .map(stringEndpoint => {\n          const [method, endpoint] = stringEndpoint.split(' - ');\n\n          return {\n            method,\n            endpoint,\n          };\n        });\n    } catch (e) {\n      /**\n       * If we fail, it's probably because this this stage is not\n       * yet deployed.\n       */\n    }\n\n    /**\n     * Communicate relevant configuration settings to the parent process (sls dev):\n     *\n     *  - General app/org information\n     *  - Send new infra/functions to websocket\n     *  - Detect new functions to watch\n     */\n    process.stdout.write(\n      JSON.stringify({\n        meta: {\n          app: sls.service.app,\n          org: sls.service.org,\n          service: sls.service.service,\n          region: deployToRegion,\n          stage: deployToStage,\n        },\n        functions: sls.service.functions,\n        resources: sls.service.resources,\n        endpoints,\n      })\n    );\n\n    return;\n  }\n\n  sls.cli.log('Starting Serverless dev mode...');\n\n  /**\n   * As a pseudo-failsafe, don't support the prod stage to limit WebSocket traffic\n   */\n  if (deployToStage === 'prod') {\n    sls.cli.log(\"Stage 'prod' cannot be used with 'serverless dev'\");\n    return;\n  }\n\n  /**\n   * Check to see if 'serverless dev' is already running\n   */\n  const processes = await findProcess('name', /(serverless|sls) dev/g);\n\n  if (processes.length === 0) {\n    sls.cli.log('Failed to detect running serverless process. Exiting.');\n    return;\n  }\n\n  /**\n   * Only one process can be running\n   */\n  if (processes.length > 1) {\n    sls.cli.log(\"Only one instance of 'serverless dev' can be running\");\n    return;\n  }\n\n  const accessKey = await getAccessKeyForTenant(sls.service.org);\n\n  const sdk = new ServerlessSDK({\n    platformStage: process.env.SERVERLESS_PLATFORM_STAGE || 'prod',\n    accessKey,\n  });\n\n  /**\n   * Primary app state. This is communicated back-and-forth over the socket with the web\n   * client.\n   */\n  let appState = {\n    /**\n     * This is a 'sls deploy' (not a function deploy). It's required\n     * for the initial build, and also any changes to the the serverless.yml\n     * file\n     */\n    isDeploying: false,\n\n    /**\n     * Mapping of (function name) <String> -> <Boolean>\n     * to determine if a function is already deploying\n     */\n    isFunctionDeploying: {},\n\n    /**\n     * These are populated from the 'sls dev --info' output, which\n     * is a combination of a parsed serverless.yml, and outputs\n     * from 'serverless info' (namely the endpoints)\n     */\n    functions: {},\n    resources: {},\n    endpoints: [],\n  };\n\n  /**\n   * Connect to the WebSocket\n   */\n  await sdk.connect({\n    orgName: sls.service.org,\n    onEvent: async ({ event, data }) => {\n      const { clientType } = data;\n\n      if (event === 'studio.connect') {\n        /**\n         * If a web client connects to the socket, then send the appState. Also issue\n         * another 'studio.connect' to communicate the the CLI is in watch mode. This\n         * will handle a case where the web client refreshes.\n         */\n        if (clientType === 'web') {\n          appState.isWebConnected = true;\n          await sdk.publishSync({ event: 'studio.connect', data: { clientType: 'cli' } });\n          await updateAppState();\n          await publishAppState();\n        }\n\n        if (clientType === 'cli') {\n          appState.isCliConnected = true;\n        }\n      }\n    },\n  });\n\n  sls.cli.log('Connected to the Serverless Platform');\n\n  await sdk.publishSync({ event: 'studio.connect', data: { clientType: 'cli' } });\n\n  if (autoStage) {\n    sls.cli.log(`Auto stage generation enabled. Will deploy to stage: \"${deployToStage}\"...`);\n    sls.cli.log(`Note: exiting dev mode will remove stage \"${deployToStage}\"...`);\n  }\n\n  const disconnect = async () => {\n    if (sdk.isConnected()) {\n      await sdk.publishSync({ event: 'studio.disconnect', data: { clientType: 'cli' } });\n      await sdk.disconnect();\n\n      process.stdout.write('\\n');\n      sls.cli.log('Disconnected from the Serverless Platform');\n    }\n  };\n\n  const cleanup = async () => {\n    await disconnect();\n\n    /**\n     * Tear down the stage if in \"auto-stage\" mode\n     */\n    if (autoStage) {\n      process.stdout.write('\\n');\n      sls.cli.log(`Cleaning up stage \"${deployToStage}\"...`);\n\n      await spawn(\n        slsCommand,\n        ['remove', `--stage=${deployToStage}`, `--region=${deployToRegion}`],\n        execOptions\n      );\n    }\n\n    process.exit(0);\n  };\n\n  let filenameToFunctionsMapping = {};\n  const functionToFilenames = {};\n\n  /**\n   * Capture ctrl+c and remove the stage that we setup\n   */\n  process.on('SIGINT', cleanup);\n  process.on('uncaughtException', disconnect);\n  process.on('exit', cleanup);\n\n  const getServerlessInfo = async () => {\n    const filenameToFunctions = {};\n    const trackedFiles = [];\n\n    /**\n     * Issue the --info variant of this command to get a parsed JSON output\n     * of the serverless.yml to determine HTTP endpoints\n     */\n    const { stdoutBuffer } = await spawn(\n      slsCommand,\n      ['dev', '--info', `--stage=${deployToStage}`],\n      {\n        env: process.env,\n      }\n    );\n\n    let output = {};\n\n    try {\n      output = JSON.parse(stdoutBuffer.toString());\n    } catch (e) {\n      /**\n       * If you ctrl+c during \"serverless dev --info\" to extract parsed\n       * yml information and HTTP endpoints, this will blow up. For now,\n       * just return some empty state objects so we can exit cleanly\n       * without an error.\n       */\n      return {\n        filenameToFunctions,\n        trackedFiles,\n        output,\n        functions: [],\n      };\n    }\n\n    const { functions } = output;\n\n    /**\n     * Use the handler path to reconstruct the path to the entry module\n     */\n    Object.keys(functions).forEach(functionName => {\n      const { dir, name } = path.parse(functions[functionName].handler);\n      const handlerEntry = `${path.join(dir, name)}.js`;\n\n      /**\n       * Determine modules required by the entry point of the handler\n       */\n      const list = dependencyTree.toList({\n        filename: handlerEntry,\n        directory: process.cwd(),\n\n        /**\n         * Don't try to watch files in node_modules\n         */\n        filter: filename => filename.indexOf('node_modules') === -1,\n      });\n\n      /**\n       * Store all files that make up this function\n       */\n      functionToFilenames[functionName] = list;\n\n      /**\n       * For convenience, map all watched modules to function(s)\n       */\n      list.forEach(watchedFilename => {\n        /**\n         * Functions already mapped to this file\n         */\n        const funcs = filenameToFunctions[watchedFilename] || [];\n\n        filenameToFunctions[watchedFilename] = new Set([...funcs, functionName]);\n      });\n\n      trackedFiles.push(...list);\n    });\n\n    return {\n      filenameToFunctions,\n      trackedFiles,\n      output,\n      functions,\n    };\n  };\n\n  const updateAppState = async () => {\n    const { output } = await getServerlessInfo();\n\n    appState = {\n      ...appState,\n      ...output,\n    };\n  };\n\n  /**\n   * Communicate application state to socket\n   */\n  const publishAppState = async overrides => {\n    await sdk.publishSync({\n      event: 'studio.state',\n      data: {\n        ...appState,\n        ...overrides,\n      },\n    });\n  };\n\n  /**\n   * Deploy the stack\n   */\n  const deploy = async isRedeploying => {\n    if (appState.isDeploying) {\n      return;\n    }\n\n    sls.cli.log(\n      `${\n        isRedeploying ? 'Redeploying' : 'Deploying'\n      } to stage \"${deployToStage}\". This may take a few minutes...`\n    );\n\n    appState.isDeploying = true;\n    await publishAppState();\n\n    await spawn(\n      slsCommand,\n      ['deploy', `--stage=${deployToStage}`, `--region=${deployToRegion}`],\n      execOptions\n    );\n\n    appState.isDeploying = false;\n\n    sls.cli.log(`Succesfully deployed stage \"${deployToStage}\"`);\n\n    await updateAppState();\n    await publishAppState();\n  };\n\n  /**\n   * Communicate initial state of the serverless.yml\n   */\n  sls.cli.log('Sending initial app state...');\n\n  await updateAppState();\n  await publishAppState({\n    isDeploying: true,\n  });\n\n  /**\n   * Deploy the serverless.yml file\n   */\n  await deploy();\n\n  /**\n   * Compute new watch files. Only rewatch new files if parsing the serverless.yml file is successfull.\n   */\n  const rewatchFiles = async () => {\n    /**\n     * Compute new watch files. Only rewatch new files if parsing the serverless.yml file is successfull.\n     */\n    const { filenameToFunctions, trackedFiles } = await getServerlessInfo();\n\n    filenameToFunctionsMapping = filenameToFunctions;\n\n    /**\n     * Remove all paths\n     */\n    await watcher.unwatch('*');\n\n    /**\n     * Re-watch new files\n     */\n    watcher.add([...possibleServerlessConfigFileVariants, ...trackedFiles]);\n  };\n\n  /**\n   * Create a new watcher. By default don't watch anything. The serverless.yml file\n   * will be parsed for function handlers. Those handlers will have their dependency\n   * trees mapped, and those files will be added dynamically by `rewatchFiles()`\n   */\n  const watcher = chokidar.watch([], {\n    /**\n     * Tracked files are absolute, and explicit. By default cwd is the currently working directory,\n     * which means the mapping between function and files will be wrong.\n     */\n    cwd: '/',\n  });\n\n  sls.cli.log('Building function dependency watch list...');\n\n  await rewatchFiles();\n\n  sls.cli.log(\n    `Tracking ${\n      Object.keys(functionToFilenames).length\n    } function handler(s), and their dependencies...`\n  );\n\n  watcher.on('ready', () => {\n    sls.cli.log('Watching for changes...');\n  });\n\n  /**\n   * Watch for file changes\n   */\n  watcher.on('change', async filepath => {\n    const { isFunctionDeploying } = appState;\n\n    /**\n     * Force resolved file path to be absolute.\n     */\n    const resolvedFilepath = path.normalize(`${path.sep}${filepath}`);\n\n    /**\n     * A serverless.ya(m)l file has changed\n     */\n    if (possibleServerlessConfigFileVariants.includes(resolvedFilepath) && !appState.isDeploying) {\n      sls.cli.log('serverless configuration changed. Checking for function changes...');\n\n      /**\n       * Compare the function (names) in the serverless.yml file\n       * with what's already in the app state. We need to redeploy\n       * the stack if:\n       *\n       *  1. A new function has ben added\n       *  2. A function has been renamed\n       *  3. If you change settings of a function\n       */\n      const { functions } = await getServerlessInfo();\n\n      if (!isEqual(functions, appState.functions)) {\n        sls.cli.log('Detected function configuration changes...');\n        sls.cli.log(`Stage \"${deployToStage}\" will be redeployed to reflect these changes...`);\n        await deploy(true);\n\n        await updateAppState();\n        await publishAppState();\n\n        rewatchFiles();\n      } else {\n        sls.cli.log('No function changes detected. Continuing...');\n      }\n\n      return;\n    }\n\n    const functionNames = filenameToFunctionsMapping[resolvedFilepath];\n\n    if (!functionNames) {\n      return;\n    }\n\n    /**\n     * Only deploy a function that is not already deploying\n     */\n    const functionsNeedingDeploy = [...functionNames].filter(\n      functionName => !isFunctionDeploying[functionName]\n    );\n\n    /**\n     * Mark all functions as deploying, and communicate that state\n     */\n    functionsNeedingDeploy.forEach(functionName => {\n      sls.cli.log(`${functionName}: changed. Redeploying...`);\n      isFunctionDeploying[functionName] = true;\n    });\n\n    if (functionsNeedingDeploy.length > 0) {\n      await publishAppState();\n    }\n\n    /**\n     * Redeploy all changed functions\n     */\n    await Promise.all(\n      functionsNeedingDeploy.map(async functionName => {\n        /**\n         * Redeploy the function\n         */\n        try {\n          await spawn(\n            slsCommand,\n            ['deploy', 'function', `--function=${functionName}`, `--stage=${deployToStage}`],\n            execOptions\n          );\n        } catch (e) {\n          /**\n           * This ocassionally fails, although I haven't yet been able\n           * to track down why.\n           */\n        } finally {\n          isFunctionDeploying[functionName] = false;\n        }\n      })\n    );\n\n    if (functionsNeedingDeploy.length > 0) {\n      await publishAppState();\n      sls.cli.log('Watching for changes...');\n    }\n  });\n};\n"],"file":"dev.js"}